edge = [1 10; 1 11; 2 7; 2 15; 3 2; 3 4; 3 5; 3 7; 3 9; 3 12; 3 15; 4 8; 4 13; 5 3; 5 4; 5 6; 5 8; 5 9; 6 2; 6 7; 6 8; 6 9; 6 10; 6 14; 7 3; 7 8; 7 9; 7 10; 7 11; 7 12; 7 15; 8 2; 8 3; 8 4; 8 5; 8 15; 9 6; 9 8; 9 11; 10 3; 10 4; 10 5; 10 8; 10 14; 10 15; 11 2; 11 5; 11 8; 11 12; 11 14; 12 4; 12 8; 12 9; 12 13; 13 2; 13 4; 13 8; 13 10; 13 11; 14 2; 14 3; 14 5; 14 10; 14 12; 14 15]
cL_orig = [2.0, 74.0, 56.0, 591.0, 3.0, 13.0, 94.0, 116.0, 152.0, 288.0, 423.0, 71.0, 57.0, 35.0, 7.0, 50.0, 74.0, 18.0, 19.0, 2.0, 37.0, 58.0, 44.0, 257.0, 64.0, 22.0, 20.0, 127.0, 94.0, 23.0, 241.0, 2.0, 19.0, 179.0, 118.0, 182.0, 82.0, 46.0, 72.0, 181.0, 140.0, 127.0, 0.0, 179.0, 110.0, 128.0, 51.0, 89.0, 17.0, 29.0, 157.0, 23.0, 51.0, 6.0, 29.0, 277.0, 235.0, 22.0, 0.0, 111.0, 5.0, 205.0, 89.0, 96.0, 45.0]
cU_orig = [2.0, 306.0, 56.0, 655.0, 41.0, 13.0, 94.0, 116.0, 152.0, 288.0, 423.0, 71.0, 57.0, 35.0, 63.0, 50.0, 74.0, 86.0, 29.0, 6.0, 37.0, 58.0, 44.0, 257.0, 104.0, 22.0, 20.0, 127.0, 94.0, 23.0, 241.0, 2.0, 19.0, 179.0, 118.0, 410.0, 82.0, 46.0, 72.0, 457.0, 140.0, 127.0, 18.0, 179.0, 110.0, 156.0, 69.0, 89.0, 17.0, 225.0, 383.0, 23.0, 51.0, 6.0, 29.0, 277.0, 235.0, 22.0, 94.0, 111.0, 5.0, 207.0, 89.0, 96.0, 45.0]
d = [33.0, 49.0, 29.0, 44.0, 16.0, 3.0, 35.0, 48.0, 3.0, 50.0, 10.0, 26.0, 5.0, 21.0, 14.0, 28.0, 32.0, 5.0, 4.0, 31.0, 46.0, 46.0, 23.0, 39.0, 50.0, 33.0, 25.0, 43.0, 39.0, 50.0, 37.0, 40.0, 39.0, 47.0, 11.0, 6.0, 31.0, 16.0, 4.0, 20.0, 19.0, 16.0, 31.0, 13.0, 32.0, 1.0, 9.0, 1.0, 24.0, 14.0, 24.0, 18.0, 40.0, 17.0, 1.0, 34.0, 41.0, 25.0, 38.0, 13.0, 46.0, 8.0, 26.0, 37.0, 30.0]
Len = length(d)

yy = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

c_orig = 0.5*(cL_orig+cU_orig)

SP_init = sum(yy[i]*c_orig[i] for i = 1:Len)


p = [1.0]

g = [SP_init]

h = [0.0]


origin = 1

destination =15

last_node = maximum(edge)
all_nodes = collect(1:last_node)

M_orig = zeros(Len)

for i = 1:Len
    M_orig[i] = cU_orig[i] - cL_orig[i]
end

case = 0
delta1 = 1e-6
delta2 = 5
last_node = maximum(edge)
