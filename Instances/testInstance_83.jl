edge = [1 5; 1 6; 1 8; 1 10; 1 11; 1 13; 2 3; 2 15; 3 2; 3 4; 3 6; 3 7; 3 8; 3 13; 4 6; 4 11; 4 12; 5 2; 5 4; 5 6; 5 11; 5 15; 6 2; 6 11; 6 12; 7 3; 7 6; 7 11; 8 14; 9 2; 9 3; 9 4; 9 12; 10 4; 10 6; 10 8; 10 11; 10 12; 10 13; 11 2; 11 3; 11 4; 11 5; 11 8; 11 10; 11 14; 12 5; 12 10; 12 13; 13 2; 13 3; 13 5; 13 6; 13 8; 13 10; 13 11; 13 12; 13 14; 14 8; 14 11; 14 13]
cL_orig = [161.0, 246.0, 145.0, 428.0, 12.0, 582.0, 50.0, 152.0, 6.0, 17.0, 135.0, 48.0, 38.0, 318.0, 7.0, 11.0, 91.0, 122.0, 12.0, 19.0, 2.0, 164.0, 16.0, 168.0, 59.0, 47.0, 48.0, 83.0, 263.0, 118.0, 14.0, 223.0, 30.0, 239.0, 52.0, 91.0, 13.0, 37.0, 150.0, 399.0, 82.0, 180.0, 245.0, 48.0, 13.0, 54.0, 163.0, 3.0, 6.0, 18.0, 88.0, 244.0, 81.0, 34.0, 4.0, 40.0, 46.0, 1.0, 282.0, 44.0, 12.0]
cU_orig = [161.0, 246.0, 145.0, 428.0, 54.0, 582.0, 50.0, 436.0, 72.0, 17.0, 135.0, 278.0, 370.0, 318.0, 7.0, 233.0, 91.0, 122.0, 40.0, 19.0, 24.0, 164.0, 16.0, 168.0, 119.0, 79.0, 48.0, 83.0, 263.0, 118.0, 52.0, 223.0, 46.0, 239.0, 56.0, 91.0, 13.0, 37.0, 150.0, 399.0, 82.0, 210.0, 245.0, 48.0, 13.0, 54.0, 163.0, 27.0, 6.0, 1050.0, 88.0, 244.0, 81.0, 34.0, 4.0, 40.0, 46.0, 1.0, 282.0, 44.0, 12.0]
d = [46.0, 29.0, 4.0, 35.0, 40.0, 41.0, 32.0, 45.0, 9.0, 42.0, 19.0, 16.0, 47.0, 41.0, 10.0, 22.0, 3.0, 8.0, 20.0, 24.0, 28.0, 6.0, 49.0, 28.0, 29.0, 13.0, 35.0, 32.0, 48.0, 44.0, 15.0, 45.0, 19.0, 49.0, 45.0, 47.0, 36.0, 23.0, 20.0, 2.0, 35.0, 4.0, 42.0, 50.0, 30.0, 48.0, 1.0, 37.0, 16.0, 36.0, 32.0, 22.0, 26.0, 39.0, 2.0, 12.0, 23.0, 35.0, 9.0, 7.0, 18.0]
Len = length(d)

yy = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

c_orig = 0.5*(cL_orig+cU_orig)

SP_init = sum(yy[i]*c_orig[i] for i = 1:Len)


p = [1.0]

g = [SP_init]

h = [0.0]


origin = 1

destination =15

last_node = maximum(edge)
all_nodes = collect(1:last_node)

M_orig = zeros(Len)

for i = 1:Len
    M_orig[i] = cU_orig[i] - cL_orig[i]
end

case = 0
delta1 = 1e-6
delta2 = 5
last_node = maximum(edge)
