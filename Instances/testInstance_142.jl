edge = [1 2; 1 3; 1 4; 1 6; 1 9; 1 14; 2 3; 2 4; 2 10; 3 11; 3 12; 3 15; 4 9; 4 12; 4 13; 5 2; 5 6; 5 8; 5 9; 5 11; 5 15; 6 2; 6 3; 6 5; 6 9; 6 15; 7 8; 7 13; 8 2; 8 7; 8 9; 8 13; 8 14; 9 2; 9 13; 10 4; 10 7; 10 9; 10 12; 10 13; 10 14; 10 15; 11 5; 11 8; 11 10; 12 4; 12 7; 12 8; 12 10; 12 11; 12 15; 13 3; 13 6; 13 7; 13 11; 13 12; 13 14; 14 4; 14 5; 14 11; 14 13]
cL_orig = [48.0, 13.0, 10.0, 115.0, 93.0, 142.0, 23.0, 4.0, 137.0, 202.0, 283.0, 111.0, 53.0, 294.0, 96.0, 61.0, 26.0, 80.0, 145.0, 45.0, 5.0, 36.0, 75.0, 9.0, 17.0, 217.0, 33.0, 101.0, 10.0, 15.0, 48.0, 90.0, 44.0, 54.0, 58.0, 42.0, 73.0, 10.0, 51.0, 17.0, 49.0, 48.0, 8.0, 4.0, 8.0, 297.0, 244.0, 21.0, 29.0, 17.0, 128.0, 39.0, 244.0, 274.0, 73.0, 10.0, 19.0, 231.0, 24.0, 14.0, 36.0]
cU_orig = [48.0, 21.0, 130.0, 115.0, 93.0, 204.0, 23.0, 4.0, 137.0, 202.0, 283.0, 111.0, 53.0, 294.0, 96.0, 61.0, 74.0, 80.0, 145.0, 45.0, 99.0, 36.0, 75.0, 89.0, 75.0, 217.0, 33.0, 101.0, 12.0, 15.0, 48.0, 190.0, 44.0, 54.0, 58.0, 42.0, 73.0, 10.0, 51.0, 25.0, 285.0, 48.0, 8.0, 4.0, 34.0, 297.0, 244.0, 21.0, 85.0, 17.0, 128.0, 39.0, 244.0, 274.0, 73.0, 10.0, 19.0, 231.0, 24.0, 14.0, 36.0]
d = [14.0, 37.0, 2.0, 47.0, 9.0, 23.0, 32.0, 12.0, 49.0, 31.0, 15.0, 25.0, 1.0, 6.0, 37.0, 31.0, 30.0, 37.0, 48.0, 46.0, 42.0, 41.0, 23.0, 9.0, 41.0, 45.0, 30.0, 14.0, 41.0, 39.0, 9.0, 45.0, 22.0, 18.0, 19.0, 50.0, 8.0, 43.0, 10.0, 47.0, 50.0, 4.0, 39.0, 17.0, 28.0, 2.0, 46.0, 14.0, 32.0, 16.0, 33.0, 22.0, 41.0, 9.0, 8.0, 46.0, 27.0, 33.0, 42.0, 18.0, 35.0]
Len = length(d)

yy = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

c_orig = 0.5*(cL_orig+cU_orig)

SP_init = sum(yy[i]*c_orig[i] for i = 1:Len)


p = [1.0]

g = [SP_init]

h = [0.0]


origin = 1

destination =15

last_node = maximum(edge)
all_nodes = collect(1:last_node)

M_orig = zeros(Len)

for i = 1:Len
    M_orig[i] = cU_orig[i] - cL_orig[i]
end

case = 0
delta1 = 1e-6
delta2 = 5
last_node = maximum(edge)
